/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiquidationAuctionInterface extends ethers.utils.Interface {
  functions: {
    "accountingEngine()": FunctionFragment;
    "activeAuctions(uint256)": FunctionFragment;
    "auction(uint256)": FunctionFragment;
    "auctionCount()": FunctionFragment;
    "authorizedAccounts(address)": FunctionFragment;
    "bidOnAuction(uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "collateralType()": FunctionFragment;
    "countActiveAuctions()": FunctionFragment;
    "discountCalculator()": FunctionFragment;
    "getAuctionStatus(uint256)": FunctionFragment;
    "grantAuthorization(address)": FunctionFragment;
    "initialize(address,address,address,bytes32)": FunctionFragment;
    "keeperIncentive()": FunctionFragment;
    "keeperRewardFactor()": FunctionFragment;
    "ledger()": FunctionFragment;
    "liquidationEngine()": FunctionFragment;
    "listActiveAuctions()": FunctionFragment;
    "maxAuctionDuration()": FunctionFragment;
    "maxPriceDiscount()": FunctionFragment;
    "minDebtForReward()": FunctionFragment;
    "oracleRelayer()": FunctionFragment;
    "restartAuction(uint256,address)": FunctionFragment;
    "revokeAuthorization(address)": FunctionFragment;
    "startAuction(uint256,uint256,address,address)": FunctionFragment;
    "startingPriceFactor()": FunctionFragment;
    "stopped()": FunctionFragment;
    "updateAccountingEngine(address)": FunctionFragment;
    "updateDiscountCalculator(address)": FunctionFragment;
    "updateKeeperIncentive(uint192)": FunctionFragment;
    "updateKeeperRewardFactor(uint64)": FunctionFragment;
    "updateLiquidationEngine(address)": FunctionFragment;
    "updateMaxAuctionDuration(uint256)": FunctionFragment;
    "updateMaxPriceDiscount(uint256)": FunctionFragment;
    "updateMinDebtForReward()": FunctionFragment;
    "updateOracleRelayer(address)": FunctionFragment;
    "updateStartingPriceFactor(uint256)": FunctionFragment;
    "updateStopped(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountingEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bidOnAuction",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countActiveAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "keeperRewardFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidationEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listActiveAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtForReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restartAuction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startingPriceFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAccountingEngine",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDiscountCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeeperIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeeperRewardFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationEngine",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxPriceDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinDebtForReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOracleRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStartingPriceFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStopped",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountingEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countActiveAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keeperIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listActiveAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDebtForReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restartAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingPriceFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountingEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDiscountCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeeperIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeeperRewardFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxPriceDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinDebtForReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOracleRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStartingPriceFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStopped",
    data: BytesLike
  ): Result;

  events: {
    "BidOnAuction(uint256,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "CancelAuction(uint256)": EventFragment;
    "GrantAuthorization(address)": EventFragment;
    "RestartAuction(uint256,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "RevokeAuthorization(address)": EventFragment;
    "StartAuction(uint256,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateMinDebtForReward(uint256,uint256)": EventFragment;
    "UpdateParameter(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidOnAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RestartAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinDebtForReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateParameter"): EventFragment;
}

export type BidOnAuctionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    auctionId: BigNumber;
    position: string;
    maxPrice: BigNumber;
    price: BigNumber;
    debtDelta: BigNumber;
    debtToRaise: BigNumber;
    collateralToSell: BigNumber;
  }
>;

export type CancelAuctionEvent = TypedEvent<
  [BigNumber] & { auctionId: BigNumber }
>;

export type GrantAuthorizationEvent = TypedEvent<[string] & { user: string }>;

export type RestartAuctionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    auctionId: BigNumber;
    position: string;
    keeper: string;
    startingPrice: BigNumber;
    debtToRaise: BigNumber;
    collateralToSell: BigNumber;
    reward: BigNumber;
  }
>;

export type RevokeAuthorizationEvent = TypedEvent<[string] & { user: string }>;

export type StartAuctionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    auctionId: BigNumber;
    position: string;
    keeper: string;
    startingPrice: BigNumber;
    debtToRaise: BigNumber;
    collateralToSell: BigNumber;
    reward: BigNumber;
  }
>;

export type UpdateMinDebtForRewardEvent = TypedEvent<
  [BigNumber, BigNumber] & { minDebtForReward: BigNumber; timestamp: BigNumber }
>;

export type UpdateParameter_bytes32_uint256_Event = TypedEvent<
  [string, BigNumber] & { parameter: string; data: BigNumber }
>;

export type UpdateParameter_bytes32_address_Event = TypedEvent<
  [string, string] & { parameter: string; data: string }
>;

export class LiquidationAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidationAuctionInterface;

  functions: {
    accountingEngine(overrides?: CallOverrides): Promise<[string]>;

    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        index: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
        position: string;
        startTime: BigNumber;
        startingPrice: BigNumber;
      }
    >;

    auctionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bidOnAuction(
      auctionId: BigNumberish,
      maxCollateralToBuy: BigNumberish,
      maxPrice: BigNumberish,
      liquidatorAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralType(overrides?: CallOverrides): Promise<[string]>;

    countActiveAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    discountCalculator(overrides?: CallOverrides): Promise<[string]>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        needsRedo: boolean;
        price: BigNumber;
        collateralToSell: BigNumber;
        debtToRaise: BigNumber;
      }
    >;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      ledger_: string,
      oracleRelayer_: string,
      liquidationEngine_: string,
      collateralType_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeperIncentive(overrides?: CallOverrides): Promise<[BigNumber]>;

    keeperRewardFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(overrides?: CallOverrides): Promise<[string]>;

    liquidationEngine(overrides?: CallOverrides): Promise<[string]>;

    listActiveAuctions(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPriceDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDebtForReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleRelayer(overrides?: CallOverrides): Promise<[string]>;

    restartAuction(
      auctionId: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startAuction(
      debtToRaise: BigNumberish,
      collateralToSell: BigNumberish,
      position: string,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startingPriceFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    stopped(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAccountingEngine(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDiscountCalculator(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateKeeperIncentive(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateKeeperRewardFactor(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidationEngine(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxPriceDiscount(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinDebtForReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOracleRelayer(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStartingPriceFactor(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStopped(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountingEngine(overrides?: CallOverrides): Promise<string>;

  activeAuctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auction(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      index: BigNumber;
      debtToRaise: BigNumber;
      collateralToSell: BigNumber;
      position: string;
      startTime: BigNumber;
      startingPrice: BigNumber;
    }
  >;

  auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  authorizedAccounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bidOnAuction(
    auctionId: BigNumberish,
    maxCollateralToBuy: BigNumberish,
    maxPrice: BigNumberish,
    liquidatorAddress: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralType(overrides?: CallOverrides): Promise<string>;

  countActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  discountCalculator(overrides?: CallOverrides): Promise<string>;

  getAuctionStatus(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      needsRedo: boolean;
      price: BigNumber;
      collateralToSell: BigNumber;
      debtToRaise: BigNumber;
    }
  >;

  grantAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    ledger_: string,
    oracleRelayer_: string,
    liquidationEngine_: string,
    collateralType_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeperIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  keeperRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(overrides?: CallOverrides): Promise<string>;

  liquidationEngine(overrides?: CallOverrides): Promise<string>;

  listActiveAuctions(overrides?: CallOverrides): Promise<BigNumber[]>;

  maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  minDebtForReward(overrides?: CallOverrides): Promise<BigNumber>;

  oracleRelayer(overrides?: CallOverrides): Promise<string>;

  restartAuction(
    auctionId: BigNumberish,
    keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startAuction(
    debtToRaise: BigNumberish,
    collateralToSell: BigNumberish,
    position: string,
    keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startingPriceFactor(overrides?: CallOverrides): Promise<BigNumber>;

  stopped(overrides?: CallOverrides): Promise<BigNumber>;

  updateAccountingEngine(
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDiscountCalculator(
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateKeeperIncentive(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateKeeperRewardFactor(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidationEngine(
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxAuctionDuration(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxPriceDiscount(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinDebtForReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOracleRelayer(
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStartingPriceFactor(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStopped(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountingEngine(overrides?: CallOverrides): Promise<string>;

    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        index: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
        position: string;
        startTime: BigNumber;
        startingPrice: BigNumber;
      }
    >;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidOnAuction(
      auctionId: BigNumberish,
      maxCollateralToBuy: BigNumberish,
      maxPrice: BigNumberish,
      liquidatorAddress: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    collateralType(overrides?: CallOverrides): Promise<string>;

    countActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    discountCalculator(overrides?: CallOverrides): Promise<string>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        needsRedo: boolean;
        price: BigNumber;
        collateralToSell: BigNumber;
        debtToRaise: BigNumber;
      }
    >;

    grantAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      ledger_: string,
      oracleRelayer_: string,
      liquidationEngine_: string,
      collateralType_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    keeperIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    keeperRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<string>;

    liquidationEngine(overrides?: CallOverrides): Promise<string>;

    listActiveAuctions(overrides?: CallOverrides): Promise<BigNumber[]>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtForReward(overrides?: CallOverrides): Promise<BigNumber>;

    oracleRelayer(overrides?: CallOverrides): Promise<string>;

    restartAuction(
      auctionId: BigNumberish,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    startAuction(
      debtToRaise: BigNumberish,
      collateralToSell: BigNumberish,
      position: string,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startingPriceFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    updateAccountingEngine(
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDiscountCalculator(
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKeeperIncentive(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateKeeperRewardFactor(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidationEngine(
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxPriceDiscount(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinDebtForReward(overrides?: CallOverrides): Promise<void>;

    updateOracleRelayer(data: string, overrides?: CallOverrides): Promise<void>;

    updateStartingPriceFactor(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStopped(data: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BidOnAuction(uint256,address,uint256,uint256,uint256,uint256,uint256)"(
      auctionId?: BigNumberish | null,
      position?: string | null,
      maxPrice?: null,
      price?: null,
      debtDelta?: null,
      debtToRaise?: null,
      collateralToSell?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        position: string;
        maxPrice: BigNumber;
        price: BigNumber;
        debtDelta: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
      }
    >;

    BidOnAuction(
      auctionId?: BigNumberish | null,
      position?: string | null,
      maxPrice?: null,
      price?: null,
      debtDelta?: null,
      debtToRaise?: null,
      collateralToSell?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        position: string;
        maxPrice: BigNumber;
        price: BigNumber;
        debtDelta: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
      }
    >;

    "CancelAuction(uint256)"(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    CancelAuction(
      auctionId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionId: BigNumber }>;

    "GrantAuthorization(address)"(
      user?: string | null
    ): TypedEventFilter<[string], { user: string }>;

    GrantAuthorization(
      user?: string | null
    ): TypedEventFilter<[string], { user: string }>;

    "RestartAuction(uint256,address,address,uint256,uint256,uint256,uint256)"(
      auctionId?: BigNumberish | null,
      position?: string | null,
      keeper?: string | null,
      startingPrice?: null,
      debtToRaise?: null,
      collateralToSell?: null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        position: string;
        keeper: string;
        startingPrice: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
        reward: BigNumber;
      }
    >;

    RestartAuction(
      auctionId?: BigNumberish | null,
      position?: string | null,
      keeper?: string | null,
      startingPrice?: null,
      debtToRaise?: null,
      collateralToSell?: null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        position: string;
        keeper: string;
        startingPrice: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
        reward: BigNumber;
      }
    >;

    "RevokeAuthorization(address)"(
      user?: string | null
    ): TypedEventFilter<[string], { user: string }>;

    RevokeAuthorization(
      user?: string | null
    ): TypedEventFilter<[string], { user: string }>;

    "StartAuction(uint256,address,address,uint256,uint256,uint256,uint256)"(
      auctionId?: BigNumberish | null,
      position?: string | null,
      keeper?: string | null,
      startingPrice?: null,
      debtToRaise?: null,
      collateralToSell?: null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        position: string;
        keeper: string;
        startingPrice: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
        reward: BigNumber;
      }
    >;

    StartAuction(
      auctionId?: BigNumberish | null,
      position?: string | null,
      keeper?: string | null,
      startingPrice?: null,
      debtToRaise?: null,
      collateralToSell?: null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        position: string;
        keeper: string;
        startingPrice: BigNumber;
        debtToRaise: BigNumber;
        collateralToSell: BigNumber;
        reward: BigNumber;
      }
    >;

    "UpdateMinDebtForReward(uint256,uint256)"(
      minDebtForReward?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { minDebtForReward: BigNumber; timestamp: BigNumber }
    >;

    UpdateMinDebtForReward(
      minDebtForReward?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { minDebtForReward: BigNumber; timestamp: BigNumber }
    >;

    "UpdateParameter(bytes32,uint256)"(
      parameter?: BytesLike | null,
      data?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { parameter: string; data: BigNumber }
    >;

    "UpdateParameter(bytes32,address)"(
      parameter?: BytesLike | null,
      data?: null
    ): TypedEventFilter<[string, string], { parameter: string; data: string }>;
  };

  estimateGas: {
    accountingEngine(overrides?: CallOverrides): Promise<BigNumber>;

    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auction(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidOnAuction(
      auctionId: BigNumberish,
      maxCollateralToBuy: BigNumberish,
      maxPrice: BigNumberish,
      liquidatorAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralType(overrides?: CallOverrides): Promise<BigNumber>;

    countActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    discountCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      ledger_: string,
      oracleRelayer_: string,
      liquidationEngine_: string,
      collateralType_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeperIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    keeperRewardFactor(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationEngine(overrides?: CallOverrides): Promise<BigNumber>;

    listActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtForReward(overrides?: CallOverrides): Promise<BigNumber>;

    oracleRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    restartAuction(
      auctionId: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startAuction(
      debtToRaise: BigNumberish,
      collateralToSell: BigNumberish,
      position: string,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startingPriceFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    updateAccountingEngine(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDiscountCalculator(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateKeeperIncentive(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateKeeperRewardFactor(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidationEngine(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxPriceDiscount(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinDebtForReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOracleRelayer(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStartingPriceFactor(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStopped(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountingEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auction(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidOnAuction(
      auctionId: BigNumberish,
      maxCollateralToBuy: BigNumberish,
      maxPrice: BigNumberish,
      liquidatorAddress: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countActiveAuctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discountCalculator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      ledger_: string,
      oracleRelayer_: string,
      liquidationEngine_: string,
      collateralType_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeperIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeperRewardFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listActiveAuctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDebtForReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    restartAuction(
      auctionId: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startAuction(
      debtToRaise: BigNumberish,
      collateralToSell: BigNumberish,
      position: string,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startingPriceFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAccountingEngine(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDiscountCalculator(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateKeeperIncentive(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateKeeperRewardFactor(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidationEngine(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxPriceDiscount(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinDebtForReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOracleRelayer(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStartingPriceFactor(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStopped(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
