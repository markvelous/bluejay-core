/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SurplusAuctionInterface extends ethers.utils.Interface {
  functions: {
    "activeAuctions(uint256)": FunctionFragment;
    "auctionCount()": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "authorizedAccounts(address)": FunctionFragment;
    "countActiveAuctions()": FunctionFragment;
    "emergencyCloseAuction(uint256)": FunctionFragment;
    "governanceToken()": FunctionFragment;
    "grantAuthorization(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "ledger()": FunctionFragment;
    "listActiveAuctions()": FunctionFragment;
    "live()": FunctionFragment;
    "maxAuctionDuration()": FunctionFragment;
    "maxBidDuration()": FunctionFragment;
    "minBidIncrement()": FunctionFragment;
    "placeBid(uint256,uint256,uint256)": FunctionFragment;
    "restartAuction(uint256)": FunctionFragment;
    "revokeAuthorization(address)": FunctionFragment;
    "settleAuction(uint256)": FunctionFragment;
    "shutdown(uint256)": FunctionFragment;
    "startAuction(uint256,uint256)": FunctionFragment;
    "updateMaxAuctionDuration(uint256)": FunctionFragment;
    "updateMaxBidDuration(uint256)": FunctionFragment;
    "updateMinBidIncrement(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "countActiveAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCloseAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listActiveAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBidDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "restartAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shutdown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxBidDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinBidIncrement",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countActiveAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCloseAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listActiveAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBidDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "restartAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxBidDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinBidIncrement",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyCloseAuction(uint256,address,uint256)": EventFragment;
    "GrantAuthorization(address)": EventFragment;
    "PlaceBid(uint256,address,uint256,uint256,uint256)": EventFragment;
    "RestartAuction(uint256,uint256)": EventFragment;
    "RevokeAuthorization(address)": EventFragment;
    "SettleAuction(uint256,address,uint256)": EventFragment;
    "StartAuction(uint256,address,uint256,uint256,uint256)": EventFragment;
    "UpdateParameter(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyCloseAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlaceBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RestartAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateParameter"): EventFragment;
}

export type EmergencyCloseAuctionEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    auctionId: BigNumber;
    refundAddress: string;
    governanceTokenRefunded: BigNumber;
  }
>;

export type GrantAuthorizationEvent = TypedEvent<
  [string] & { account: string }
>;

export type PlaceBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
    auctionId: BigNumber;
    bidder: string;
    governanceTokenBid: BigNumber;
    debtLotSize: BigNumber;
    auctionExpiry: BigNumber;
  }
>;

export type RestartAuctionEvent = TypedEvent<
  [BigNumber, BigNumber] & { auctionId: BigNumber; auctionExpiry: BigNumber }
>;

export type RevokeAuthorizationEvent = TypedEvent<
  [string] & { account: string }
>;

export type SettleAuctionEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    auctionId: BigNumber;
    winningBidder: string;
    governanceTokenBurned: BigNumber;
  }
>;

export type StartAuctionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
    auctionId: BigNumber;
    initialBidder: string;
    auctionExpiry: BigNumber;
    debtLotSize: BigNumber;
    initialGovernanceTokenBid: BigNumber;
  }
>;

export type UpdateParameterEvent = TypedEvent<
  [string, BigNumber] & { parameter: string; data: BigNumber }
>;

export class SurplusAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SurplusAuctionInterface;

  functions: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number, number] & {
        index: BigNumber;
        bidAmount: BigNumber;
        debtToSell: BigNumber;
        highestBidder: string;
        bidExpiry: number;
        auctionExpiry: number;
      }
    >;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countActiveAuctions(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyCloseAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governanceToken(overrides?: CallOverrides): Promise<[string]>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      ledger_: string,
      governanceToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ledger(overrides?: CallOverrides): Promise<[string]>;

    listActiveAuctions(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<[number]>;

    maxBidDuration(overrides?: CallOverrides): Promise<[number]>;

    minBidIncrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeBid(
      auctionId: BigNumberish,
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restartAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdown(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startAuction(
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxBidDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinBidIncrement(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeAuctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number, number] & {
      index: BigNumber;
      bidAmount: BigNumber;
      debtToSell: BigNumber;
      highestBidder: string;
      bidExpiry: number;
      auctionExpiry: number;
    }
  >;

  authorizedAccounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyCloseAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governanceToken(overrides?: CallOverrides): Promise<string>;

  grantAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    ledger_: string,
    governanceToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ledger(overrides?: CallOverrides): Promise<string>;

  listActiveAuctions(overrides?: CallOverrides): Promise<BigNumber[]>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  maxAuctionDuration(overrides?: CallOverrides): Promise<number>;

  maxBidDuration(overrides?: CallOverrides): Promise<number>;

  minBidIncrement(overrides?: CallOverrides): Promise<BigNumber>;

  placeBid(
    auctionId: BigNumberish,
    debtToSell: BigNumberish,
    bidAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restartAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdown(
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startAuction(
    debtToSell: BigNumberish,
    bidAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxAuctionDuration(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxBidDuration(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinBidIncrement(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number, number] & {
        index: BigNumber;
        bidAmount: BigNumber;
        debtToSell: BigNumber;
        highestBidder: string;
        bidExpiry: number;
        auctionExpiry: number;
      }
    >;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyCloseAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governanceToken(overrides?: CallOverrides): Promise<string>;

    grantAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      ledger_: string,
      governanceToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ledger(overrides?: CallOverrides): Promise<string>;

    listActiveAuctions(overrides?: CallOverrides): Promise<BigNumber[]>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<number>;

    maxBidDuration(overrides?: CallOverrides): Promise<number>;

    minBidIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      auctionId: BigNumberish,
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    restartAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdown(rad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startAuction(
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxBidDuration(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinBidIncrement(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmergencyCloseAuction(uint256,address,uint256)"(
      auctionId?: BigNumberish | null,
      refundAddress?: string | null,
      governanceTokenRefunded?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        auctionId: BigNumber;
        refundAddress: string;
        governanceTokenRefunded: BigNumber;
      }
    >;

    EmergencyCloseAuction(
      auctionId?: BigNumberish | null,
      refundAddress?: string | null,
      governanceTokenRefunded?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        auctionId: BigNumber;
        refundAddress: string;
        governanceTokenRefunded: BigNumber;
      }
    >;

    "GrantAuthorization(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    GrantAuthorization(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    "PlaceBid(uint256,address,uint256,uint256,uint256)"(
      auctionId?: BigNumberish | null,
      bidder?: string | null,
      governanceTokenBid?: null,
      debtLotSize?: null,
      auctionExpiry?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        bidder: string;
        governanceTokenBid: BigNumber;
        debtLotSize: BigNumber;
        auctionExpiry: BigNumber;
      }
    >;

    PlaceBid(
      auctionId?: BigNumberish | null,
      bidder?: string | null,
      governanceTokenBid?: null,
      debtLotSize?: null,
      auctionExpiry?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        bidder: string;
        governanceTokenBid: BigNumber;
        debtLotSize: BigNumber;
        auctionExpiry: BigNumber;
      }
    >;

    "RestartAuction(uint256,uint256)"(
      auctionId?: BigNumberish | null,
      auctionExpiry?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionId: BigNumber; auctionExpiry: BigNumber }
    >;

    RestartAuction(
      auctionId?: BigNumberish | null,
      auctionExpiry?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionId: BigNumber; auctionExpiry: BigNumber }
    >;

    "RevokeAuthorization(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    RevokeAuthorization(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    "SettleAuction(uint256,address,uint256)"(
      auctionId?: BigNumberish | null,
      winningBidder?: string | null,
      governanceTokenBurned?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        auctionId: BigNumber;
        winningBidder: string;
        governanceTokenBurned: BigNumber;
      }
    >;

    SettleAuction(
      auctionId?: BigNumberish | null,
      winningBidder?: string | null,
      governanceTokenBurned?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      {
        auctionId: BigNumber;
        winningBidder: string;
        governanceTokenBurned: BigNumber;
      }
    >;

    "StartAuction(uint256,address,uint256,uint256,uint256)"(
      auctionId?: BigNumberish | null,
      initialBidder?: string | null,
      auctionExpiry?: null,
      debtLotSize?: null,
      initialGovernanceTokenBid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        initialBidder: string;
        auctionExpiry: BigNumber;
        debtLotSize: BigNumber;
        initialGovernanceTokenBid: BigNumber;
      }
    >;

    StartAuction(
      auctionId?: BigNumberish | null,
      initialBidder?: string | null,
      auctionExpiry?: null,
      debtLotSize?: null,
      initialGovernanceTokenBid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        initialBidder: string;
        auctionExpiry: BigNumber;
        debtLotSize: BigNumber;
        initialGovernanceTokenBid: BigNumber;
      }
    >;

    "UpdateParameter(bytes32,uint256)"(
      parameter?: BytesLike | null,
      data?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { parameter: string; data: BigNumber }
    >;

    UpdateParameter(
      parameter?: BytesLike | null,
      data?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { parameter: string; data: BigNumber }
    >;
  };

  estimateGas: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionCount(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyCloseAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governanceToken(overrides?: CallOverrides): Promise<BigNumber>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      ledger_: string,
      governanceToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<BigNumber>;

    listActiveAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxBidDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minBidIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      auctionId: BigNumberish,
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restartAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdown(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startAuction(
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxBidDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinBidIncrement(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countActiveAuctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyCloseAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governanceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      ledger_: string,
      governanceToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ledger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listActiveAuctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBidDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBidIncrement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBid(
      auctionId: BigNumberish,
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restartAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdown(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startAuction(
      debtToSell: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxAuctionDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxBidDuration(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinBidIncrement(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
