/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ProxyHelper, ProxyHelperInterface } from "../ProxyHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "collateralJoinAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "exitCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stablecoinJoinAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "exitStablecoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collateralJoinAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "joinCollateral",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stablecoinJoinAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "joinStablecoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "collateralType",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "ledgerAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "stablecoinJoinAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "collateralJoinAddr",
        type: "address",
      },
      {
        internalType: "int256",
        name: "collateralDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "normalizedDebtDelta",
        type: "int256",
      },
    ],
    name: "transferCollateralAndDebt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "savingsAccountAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "stablecoinJoinAddr",
        type: "address",
      },
      {
        internalType: "int256",
        name: "debtDelta",
        type: "int256",
      },
    ],
    name: "transferSavings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";

export class ProxyHelper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProxyHelper> {
    return super.deploy(overrides || {}) as Promise<ProxyHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ProxyHelper {
    return super.attach(address) as ProxyHelper;
  }
  connect(signer: Signer): ProxyHelper__factory {
    return super.connect(signer) as ProxyHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyHelperInterface {
    return new utils.Interface(_abi) as ProxyHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyHelper {
    return new Contract(address, _abi, signerOrProvider) as ProxyHelper;
  }
}
