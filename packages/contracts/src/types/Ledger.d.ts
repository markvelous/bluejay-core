/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LedgerInterface extends ethers.utils.Interface {
  functions: {
    "allowModification(address)": FunctionFragment;
    "allowed(address,address)": FunctionFragment;
    "authorizedAccounts(address)": FunctionFragment;
    "collateral(bytes32,address)": FunctionFragment;
    "collateralTypes(bytes32)": FunctionFragment;
    "confiscateCollateralAndDebt(bytes32,address,address,address,int256,int256)": FunctionFragment;
    "createUnbackedDebt(address,address,uint256)": FunctionFragment;
    "debt(address)": FunctionFragment;
    "denyModification(address)": FunctionFragment;
    "grantAuthorization(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeCollateralType(bytes32)": FunctionFragment;
    "live()": FunctionFragment;
    "modifyCollateral(bytes32,address,int256)": FunctionFragment;
    "modifyPositionCollateralization(bytes32,address,address,address,int256,int256)": FunctionFragment;
    "positions(bytes32,address)": FunctionFragment;
    "revokeAuthorization(address)": FunctionFragment;
    "settleUnbackedDebt(uint256)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "totalDebtCeiling()": FunctionFragment;
    "totalUnbackedDebt()": FunctionFragment;
    "transferCollateral(bytes32,address,address,uint256)": FunctionFragment;
    "transferCollateralAndDebt(bytes32,address,address,int256,int256)": FunctionFragment;
    "transferDebt(address,address,uint256)": FunctionFragment;
    "unbackedDebt(address)": FunctionFragment;
    "updateAccumulatedRate(bytes32,address,int256)": FunctionFragment;
    "updateDebtCeiling(bytes32,uint256)": FunctionFragment;
    "updateDebtFloor(bytes32,uint256)": FunctionFragment;
    "updateSafetyPrice(bytes32,uint256)": FunctionFragment;
    "updateTotalDebtCeiling(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowModification",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTypes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confiscateCollateralAndDebt",
    values: [BytesLike, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createUnbackedDebt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "debt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "denyModification",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCollateralType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "modifyCollateral",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPositionCollateralization",
    values: [BytesLike, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleUnbackedDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDebtCeiling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnbackedDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferCollateral",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCollateralAndDebt",
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDebt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbackedDebt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccumulatedRate",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebtCeiling",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebtFloor",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSafetyPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalDebtCeiling",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confiscateCollateralAndDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUnbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denyModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyPositionCollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleUnbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCollateralAndDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccumulatedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSafetyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalDebtCeiling",
    data: BytesLike
  ): Result;

  events: {
    "AllowModification(address,address)": EventFragment;
    "ConfiscateCollateralAndDebt(bytes32,address,address,address,int256,int256)": EventFragment;
    "CreateUnbackedDebt(address,address,uint256,uint256,uint256)": EventFragment;
    "DenyModification(address,address)": EventFragment;
    "GrantAuthorization(address)": EventFragment;
    "InitializeCollateralType(bytes32)": EventFragment;
    "ModifyCollateral(bytes32,address,int256)": EventFragment;
    "ModifyPositionCollateralization(bytes32,address,address,address,int256,int256,uint256,uint256)": EventFragment;
    "RevokeAuthorization(address)": EventFragment;
    "SettleUnbackedDebt(address,uint256)": EventFragment;
    "TransferCollateral(bytes32,address,address,uint256)": EventFragment;
    "TransferCollateralAndDebt(bytes32,address,address,int256,int256,uint256,uint256,uint256,uint256)": EventFragment;
    "TransferDebt(address,address,uint256)": EventFragment;
    "UpdateAccumulatedRate(bytes32,address,int256,int256)": EventFragment;
    "UpdateParameter(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowModification"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ConfiscateCollateralAndDebt"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateUnbackedDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DenyModification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializeCollateralType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifyCollateral"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ModifyPositionCollateralization"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleUnbackedDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCollateralAndDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAccumulatedRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateParameter"): EventFragment;
}

export type AllowModificationEvent = TypedEvent<
  [string, string] & { target: string; user: string }
>;

export type ConfiscateCollateralAndDebtEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    collateralType: string;
    position: string;
    collateralCounterparty: string;
    debtCounterparty: string;
    collateralDelta: BigNumber;
    normalizedDebtDelta: BigNumber;
  }
>;

export type CreateUnbackedDebtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    debtDestination: string;
    unbackedDebtDestination: string;
    amount: BigNumber;
    debtDestinationBalance: BigNumber;
    unbackedDebtDestinationBalance: BigNumber;
  }
>;

export type DenyModificationEvent = TypedEvent<
  [string, string] & { target: string; user: string }
>;

export type GrantAuthorizationEvent = TypedEvent<
  [string] & { account: string }
>;

export type InitializeCollateralTypeEvent = TypedEvent<
  [string] & { collateralType: string }
>;

export type ModifyCollateralEvent = TypedEvent<
  [string, string, BigNumber] & {
    collateralType: string;
    user: string;
    amount: BigNumber;
  }
>;

export type ModifyPositionCollateralizationEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collateralType: string;
    position: string;
    collateralSource: string;
    debtDestination: string;
    collateralDelta: BigNumber;
    normalizedDebtDelta: BigNumber;
    lockedCollateral: BigNumber;
    normalizedDebt: BigNumber;
  }
>;

export type RevokeAuthorizationEvent = TypedEvent<
  [string] & { account: string }
>;

export type SettleUnbackedDebtEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type TransferCollateralEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    collateralType: string;
    from: string;
    to: string;
    amount: BigNumber;
  }
>;

export type TransferCollateralAndDebtEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collateralType: string;
    src: string;
    dst: string;
    collateralDelta: BigNumber;
    normalizedDebtDelta: BigNumber;
    srcLockedCollateral: BigNumber;
    srcNormalizedDebt: BigNumber;
    dstLockedCollateral: BigNumber;
    dstNormalizedDebt: BigNumber;
  }
>;

export type TransferDebtEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; amount: BigNumber }
>;

export type UpdateAccumulatedRateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    collateralType: string;
    surplusDestination: string;
    accumulatedRatedelta: BigNumber;
    surplusDelta: BigNumber;
  }
>;

export type UpdateParameter_bytes32_uint256_Event = TypedEvent<
  [string, BigNumber] & { parameter: string; data: BigNumber }
>;

export type UpdateParameter_bytes32_bytes32_uint256_Event = TypedEvent<
  [string, string, BigNumber] & {
    parameter: string;
    collateralType: string;
    data: BigNumber;
  }
>;

export class Ledger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LedgerInterface;

  functions: {
    allowModification(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        normalizedDebt: BigNumber;
        accumulatedRate: BigNumber;
        safetyPrice: BigNumber;
        debtCeiling: BigNumber;
        debtFloor: BigNumber;
      }
    >;

    confiscateCollateralAndDebt(
      collateralType: BytesLike,
      user: string,
      collateralCounterparty: string,
      debtCounterparty: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createUnbackedDebt(
      unbackedDebtAccount: string,
      debtAccount: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    denyModification(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeCollateralType(
      collateralType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    modifyCollateral(
      collateralType: BytesLike,
      user: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyPositionCollateralization(
      collateralType: BytesLike,
      position: string,
      collateralSource: string,
      debtDestination: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positions(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedCollateral: BigNumber;
        normalizedDebt: BigNumber;
      }
    >;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnbackedDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferCollateral(
      collateralType: BytesLike,
      from: string,
      to: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferCollateralAndDebt(
      collateralType: BytesLike,
      src: string,
      dst: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferDebt(
      from: string,
      to: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbackedDebt(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAccumulatedRate(
      collateralType: BytesLike,
      debtDestination: string,
      accumulatedRateDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDebtCeiling(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDebtFloor(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSafetyPrice(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTotalDebtCeiling(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowModification(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  authorizedAccounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateral(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralTypes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      normalizedDebt: BigNumber;
      accumulatedRate: BigNumber;
      safetyPrice: BigNumber;
      debtCeiling: BigNumber;
      debtFloor: BigNumber;
    }
  >;

  confiscateCollateralAndDebt(
    collateralType: BytesLike,
    user: string,
    collateralCounterparty: string,
    debtCounterparty: string,
    collateralDelta: BigNumberish,
    normalizedDebtDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createUnbackedDebt(
    unbackedDebtAccount: string,
    debtAccount: string,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  denyModification(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeCollateralType(
    collateralType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  modifyCollateral(
    collateralType: BytesLike,
    user: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyPositionCollateralization(
    collateralType: BytesLike,
    position: string,
    collateralSource: string,
    debtDestination: string,
    collateralDelta: BigNumberish,
    normalizedDebtDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positions(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      lockedCollateral: BigNumber;
      normalizedDebt: BigNumber;
    }
  >;

  revokeAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleUnbackedDebt(
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnbackedDebt(overrides?: CallOverrides): Promise<BigNumber>;

  transferCollateral(
    collateralType: BytesLike,
    from: string,
    to: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferCollateralAndDebt(
    collateralType: BytesLike,
    src: string,
    dst: string,
    collateralDelta: BigNumberish,
    normalizedDebtDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferDebt(
    from: string,
    to: string,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbackedDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  updateAccumulatedRate(
    collateralType: BytesLike,
    debtDestination: string,
    accumulatedRateDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDebtCeiling(
    collateralType: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDebtFloor(
    collateralType: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSafetyPrice(
    collateralType: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTotalDebtCeiling(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowModification(user: string, overrides?: CallOverrides): Promise<void>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        normalizedDebt: BigNumber;
        accumulatedRate: BigNumber;
        safetyPrice: BigNumber;
        debtCeiling: BigNumber;
        debtFloor: BigNumber;
      }
    >;

    confiscateCollateralAndDebt(
      collateralType: BytesLike,
      user: string,
      collateralCounterparty: string,
      debtCounterparty: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createUnbackedDebt(
      unbackedDebtAccount: string,
      debtAccount: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    debt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    denyModification(user: string, overrides?: CallOverrides): Promise<void>;

    grantAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeCollateralType(
      collateralType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    modifyCollateral(
      collateralType: BytesLike,
      user: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyPositionCollateralization(
      collateralType: BytesLike,
      position: string,
      collateralSource: string,
      debtDestination: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    positions(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedCollateral: BigNumber;
        normalizedDebt: BigNumber;
      }
    >;

    revokeAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnbackedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferCollateral(
      collateralType: BytesLike,
      from: string,
      to: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferCollateralAndDebt(
      collateralType: BytesLike,
      src: string,
      dst: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferDebt(
      from: string,
      to: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unbackedDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateAccumulatedRate(
      collateralType: BytesLike,
      debtDestination: string,
      accumulatedRateDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDebtCeiling(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDebtFloor(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSafetyPrice(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTotalDebtCeiling(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllowModification(address,address)"(
      target?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { target: string; user: string }>;

    AllowModification(
      target?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { target: string; user: string }>;

    "ConfiscateCollateralAndDebt(bytes32,address,address,address,int256,int256)"(
      collateralType?: BytesLike | null,
      position?: string | null,
      collateralCounterparty?: null,
      debtCounterparty?: null,
      collateralDelta?: null,
      normalizedDebtDelta?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        collateralType: string;
        position: string;
        collateralCounterparty: string;
        debtCounterparty: string;
        collateralDelta: BigNumber;
        normalizedDebtDelta: BigNumber;
      }
    >;

    ConfiscateCollateralAndDebt(
      collateralType?: BytesLike | null,
      position?: string | null,
      collateralCounterparty?: null,
      debtCounterparty?: null,
      collateralDelta?: null,
      normalizedDebtDelta?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        collateralType: string;
        position: string;
        collateralCounterparty: string;
        debtCounterparty: string;
        collateralDelta: BigNumber;
        normalizedDebtDelta: BigNumber;
      }
    >;

    "CreateUnbackedDebt(address,address,uint256,uint256,uint256)"(
      debtDestination?: null,
      unbackedDebtDestination?: null,
      amount?: null,
      debtDestinationBalance?: null,
      unbackedDebtDestinationBalance?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        debtDestination: string;
        unbackedDebtDestination: string;
        amount: BigNumber;
        debtDestinationBalance: BigNumber;
        unbackedDebtDestinationBalance: BigNumber;
      }
    >;

    CreateUnbackedDebt(
      debtDestination?: null,
      unbackedDebtDestination?: null,
      amount?: null,
      debtDestinationBalance?: null,
      unbackedDebtDestinationBalance?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        debtDestination: string;
        unbackedDebtDestination: string;
        amount: BigNumber;
        debtDestinationBalance: BigNumber;
        unbackedDebtDestinationBalance: BigNumber;
      }
    >;

    "DenyModification(address,address)"(
      target?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { target: string; user: string }>;

    DenyModification(
      target?: string | null,
      user?: string | null
    ): TypedEventFilter<[string, string], { target: string; user: string }>;

    "GrantAuthorization(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    GrantAuthorization(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    "InitializeCollateralType(bytes32)"(
      collateralType?: BytesLike | null
    ): TypedEventFilter<[string], { collateralType: string }>;

    InitializeCollateralType(
      collateralType?: BytesLike | null
    ): TypedEventFilter<[string], { collateralType: string }>;

    "ModifyCollateral(bytes32,address,int256)"(
      collateralType?: null,
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { collateralType: string; user: string; amount: BigNumber }
    >;

    ModifyCollateral(
      collateralType?: null,
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { collateralType: string; user: string; amount: BigNumber }
    >;

    "ModifyPositionCollateralization(bytes32,address,address,address,int256,int256,uint256,uint256)"(
      collateralType?: BytesLike | null,
      position?: string | null,
      collateralSource?: null,
      debtDestination?: null,
      collateralDelta?: null,
      normalizedDebtDelta?: null,
      lockedCollateral?: null,
      normalizedDebt?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        collateralType: string;
        position: string;
        collateralSource: string;
        debtDestination: string;
        collateralDelta: BigNumber;
        normalizedDebtDelta: BigNumber;
        lockedCollateral: BigNumber;
        normalizedDebt: BigNumber;
      }
    >;

    ModifyPositionCollateralization(
      collateralType?: BytesLike | null,
      position?: string | null,
      collateralSource?: null,
      debtDestination?: null,
      collateralDelta?: null,
      normalizedDebtDelta?: null,
      lockedCollateral?: null,
      normalizedDebt?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        collateralType: string;
        position: string;
        collateralSource: string;
        debtDestination: string;
        collateralDelta: BigNumber;
        normalizedDebtDelta: BigNumber;
        lockedCollateral: BigNumber;
        normalizedDebt: BigNumber;
      }
    >;

    "RevokeAuthorization(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    RevokeAuthorization(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    "SettleUnbackedDebt(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    SettleUnbackedDebt(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "TransferCollateral(bytes32,address,address,uint256)"(
      collateralType?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { collateralType: string; from: string; to: string; amount: BigNumber }
    >;

    TransferCollateral(
      collateralType?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { collateralType: string; from: string; to: string; amount: BigNumber }
    >;

    "TransferCollateralAndDebt(bytes32,address,address,int256,int256,uint256,uint256,uint256,uint256)"(
      collateralType?: BytesLike | null,
      src?: string | null,
      dst?: string | null,
      collateralDelta?: null,
      normalizedDebtDelta?: null,
      srcLockedCollateral?: null,
      srcNormalizedDebt?: null,
      dstLockedCollateral?: null,
      dstNormalizedDebt?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        collateralType: string;
        src: string;
        dst: string;
        collateralDelta: BigNumber;
        normalizedDebtDelta: BigNumber;
        srcLockedCollateral: BigNumber;
        srcNormalizedDebt: BigNumber;
        dstLockedCollateral: BigNumber;
        dstNormalizedDebt: BigNumber;
      }
    >;

    TransferCollateralAndDebt(
      collateralType?: BytesLike | null,
      src?: string | null,
      dst?: string | null,
      collateralDelta?: null,
      normalizedDebtDelta?: null,
      srcLockedCollateral?: null,
      srcNormalizedDebt?: null,
      dstLockedCollateral?: null,
      dstNormalizedDebt?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        collateralType: string;
        src: string;
        dst: string;
        collateralDelta: BigNumber;
        normalizedDebtDelta: BigNumber;
        srcLockedCollateral: BigNumber;
        srcNormalizedDebt: BigNumber;
        dstLockedCollateral: BigNumber;
        dstNormalizedDebt: BigNumber;
      }
    >;

    "TransferDebt(address,address,uint256)"(
      from?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    TransferDebt(
      from?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;

    "UpdateAccumulatedRate(bytes32,address,int256,int256)"(
      collateralType?: BytesLike | null,
      surplusDestination?: null,
      accumulatedRatedelta?: null,
      surplusDelta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        collateralType: string;
        surplusDestination: string;
        accumulatedRatedelta: BigNumber;
        surplusDelta: BigNumber;
      }
    >;

    UpdateAccumulatedRate(
      collateralType?: BytesLike | null,
      surplusDestination?: null,
      accumulatedRatedelta?: null,
      surplusDelta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        collateralType: string;
        surplusDestination: string;
        accumulatedRatedelta: BigNumber;
        surplusDelta: BigNumber;
      }
    >;

    "UpdateParameter(bytes32,uint256)"(
      parameter?: BytesLike | null,
      data?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { parameter: string; data: BigNumber }
    >;

    "UpdateParameter(bytes32,bytes32,uint256)"(
      parameter?: BytesLike | null,
      collateralType?: BytesLike | null,
      data?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { parameter: string; collateralType: string; data: BigNumber }
    >;
  };

  estimateGas: {
    allowModification(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confiscateCollateralAndDebt(
      collateralType: BytesLike,
      user: string,
      collateralCounterparty: string,
      debtCounterparty: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createUnbackedDebt(
      unbackedDebtAccount: string,
      debtAccount: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    denyModification(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeCollateralType(
      collateralType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    modifyCollateral(
      collateralType: BytesLike,
      user: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyPositionCollateralization(
      collateralType: BytesLike,
      position: string,
      collateralSource: string,
      debtDestination: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positions(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnbackedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferCollateral(
      collateralType: BytesLike,
      from: string,
      to: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferCollateralAndDebt(
      collateralType: BytesLike,
      src: string,
      dst: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferDebt(
      from: string,
      to: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbackedDebt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateAccumulatedRate(
      collateralType: BytesLike,
      debtDestination: string,
      accumulatedRateDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDebtCeiling(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDebtFloor(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSafetyPrice(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTotalDebtCeiling(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowModification(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confiscateCollateralAndDebt(
      collateralType: BytesLike,
      user: string,
      collateralCounterparty: string,
      debtCounterparty: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createUnbackedDebt(
      unbackedDebtAccount: string,
      debtAccount: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    denyModification(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeCollateralType(
      collateralType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyCollateral(
      collateralType: BytesLike,
      user: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyPositionCollateralization(
      collateralType: BytesLike,
      position: string,
      collateralSource: string,
      debtDestination: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnbackedDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferCollateral(
      collateralType: BytesLike,
      from: string,
      to: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferCollateralAndDebt(
      collateralType: BytesLike,
      src: string,
      dst: string,
      collateralDelta: BigNumberish,
      normalizedDebtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferDebt(
      from: string,
      to: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbackedDebt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAccumulatedRate(
      collateralType: BytesLike,
      debtDestination: string,
      accumulatedRateDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDebtCeiling(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDebtFloor(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSafetyPrice(
      collateralType: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTotalDebtCeiling(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
