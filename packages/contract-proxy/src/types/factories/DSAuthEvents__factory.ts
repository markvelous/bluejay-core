/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DSAuthEvents, DSAuthEventsInterface } from "../DSAuthEvents";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "LogSetAuthority",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "LogSetOwner",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220dad601f38acc01e8b55fe923701a6bb80004f7ba1d485b4b2cd6f6e9852228f164736f6c63430008040033";

export class DSAuthEvents__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DSAuthEvents> {
    return super.deploy(overrides || {}) as Promise<DSAuthEvents>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DSAuthEvents {
    return super.attach(address) as DSAuthEvents;
  }
  connect(signer: Signer): DSAuthEvents__factory {
    return super.connect(signer) as DSAuthEvents__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DSAuthEventsInterface {
    return new utils.Interface(_abi) as DSAuthEventsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DSAuthEvents {
    return new Contract(address, _abi, signerOrProvider) as DSAuthEvents;
  }
}
