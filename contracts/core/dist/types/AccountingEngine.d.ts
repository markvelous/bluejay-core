/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AccountingEngineInterface extends ethers.utils.Interface {
  functions: {
    "auctionDebt()": FunctionFragment;
    "auctionSurplus()": FunctionFragment;
    "authorizedAccounts(address)": FunctionFragment;
    "countPendingDebts()": FunctionFragment;
    "debtAuction()": FunctionFragment;
    "debtAuctionLotSize()": FunctionFragment;
    "debtCount()": FunctionFragment;
    "debtQueue(uint256)": FunctionFragment;
    "grantAuthorization(address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "intialDebtAuctionBid()": FunctionFragment;
    "ledger()": FunctionFragment;
    "listPendingDebts()": FunctionFragment;
    "live()": FunctionFragment;
    "pendingDebts(uint256)": FunctionFragment;
    "popDebtDelay()": FunctionFragment;
    "popDebtFromQueue(uint256)": FunctionFragment;
    "pushDebtToQueue(uint256)": FunctionFragment;
    "revokeAuthorization(address)": FunctionFragment;
    "settleUnbackedDebt(uint256)": FunctionFragment;
    "settleUnbackedDebtFromAuction(uint256)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "surplusAuction()": FunctionFragment;
    "surplusAuctionLotSize()": FunctionFragment;
    "surplusBuffer()": FunctionFragment;
    "totalDebtOnAuction()": FunctionFragment;
    "totalQueuedDebt()": FunctionFragment;
    "updateDebtAuction(address)": FunctionFragment;
    "updateDebtAuctionLotSize(uint256)": FunctionFragment;
    "updateIntialDebtAuctionBid(uint256)": FunctionFragment;
    "updatePopDebtDelay(uint256)": FunctionFragment;
    "updateSurplusAuction(address)": FunctionFragment;
    "updateSurplusAuctionLotSize(uint256)": FunctionFragment;
    "updateSurplusBuffer(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctionDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionSurplus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "countPendingDebts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtAuctionLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "debtQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "intialDebtAuctionBid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ledger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listPendingDebts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDebts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "popDebtDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "popDebtFromQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pushDebtToQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settleUnbackedDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleUnbackedDebtFromAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "surplusAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusAuctionLotSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebtOnAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebtAuction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDebtAuctionLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIntialDebtAuctionBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePopDebtDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSurplusAuction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSurplusAuctionLotSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSurplusBuffer",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countPendingDebts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtQueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intialDebtAuctionBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listPendingDebts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDebts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "popDebtDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "popDebtFromQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushDebtToQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleUnbackedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleUnbackedDebtFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIntialDebtAuctionBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePopDebtDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSurplusAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSurplusAuctionLotSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSurplusBuffer",
    data: BytesLike
  ): Result;

  events: {
    "AuctionDebt(uint256,uint256,uint256)": EventFragment;
    "AuctionSurplus(uint256,uint256)": EventFragment;
    "GrantAuthorization(address)": EventFragment;
    "PopDebtFromQueue(uint256,uint256,uint256)": EventFragment;
    "PushDebtToQueue(uint256,uint256,uint256)": EventFragment;
    "RevokeAuthorization(address)": EventFragment;
    "SettleUnbackedDebt(uint256)": EventFragment;
    "SettleUnbackedDebtFromAuction(uint256)": EventFragment;
    "UpdateParameter(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSurplus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PopDebtFromQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushDebtToQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeAuthorization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleUnbackedDebt"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettleUnbackedDebtFromAuction"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateParameter"): EventFragment;
}

export type AuctionDebtEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    auctionId: BigNumber;
    debtOnAuction: BigNumber;
    initialCollateralBid: BigNumber;
  }
>;

export type AuctionSurplusEvent = TypedEvent<
  [BigNumber, BigNumber] & { auctionId: BigNumber; surplusOnAuction: BigNumber }
>;

export type GrantAuthorizationEvent = TypedEvent<
  [string] & { account: string }
>;

export type PopDebtFromQueueEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    queueId: BigNumber;
    debt: BigNumber;
    timestamp: BigNumber;
  }
>;

export type PushDebtToQueueEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    queueId: BigNumber;
    debt: BigNumber;
    timestamp: BigNumber;
  }
>;

export type RevokeAuthorizationEvent = TypedEvent<
  [string] & { account: string }
>;

export type SettleUnbackedDebtEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type SettleUnbackedDebtFromAuctionEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type UpdateParameter_bytes32_uint256_Event = TypedEvent<
  [string, BigNumber] & { parameter: string; data: BigNumber }
>;

export type UpdateParameter_bytes32_address_Event = TypedEvent<
  [string, string] & { parameter: string; data: string }
>;

export class AccountingEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AccountingEngineInterface;

  functions: {
    auctionDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionSurplus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countPendingDebts(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtAuction(overrides?: CallOverrides): Promise<[string]>;

    debtAuctionLotSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        index: BigNumber;
        debt: BigNumber;
        timestamp: BigNumber;
      }
    >;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      ledger_: string,
      surplusAuction_: string,
      debtAuction_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    intialDebtAuctionBid(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(overrides?: CallOverrides): Promise<[string]>;

    listPendingDebts(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDebts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    popDebtDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    popDebtFromQueue(
      queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushDebtToQueue(
      tab: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleUnbackedDebtFromAuction(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    surplusAuction(overrides?: CallOverrides): Promise<[string]>;

    surplusAuctionLotSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    surplusBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebtOnAuction(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQueuedDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateDebtAuction(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDebtAuctionLotSize(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIntialDebtAuctionBid(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePopDebtDelay(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSurplusAuction(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSurplusAuctionLotSize(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSurplusBuffer(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  auctionDebt(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionSurplus(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizedAccounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countPendingDebts(overrides?: CallOverrides): Promise<BigNumber>;

  debtAuction(overrides?: CallOverrides): Promise<string>;

  debtAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  debtCount(overrides?: CallOverrides): Promise<BigNumber>;

  debtQueue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      index: BigNumber;
      debt: BigNumber;
      timestamp: BigNumber;
    }
  >;

  grantAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    ledger_: string,
    surplusAuction_: string,
    debtAuction_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  intialDebtAuctionBid(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(overrides?: CallOverrides): Promise<string>;

  listPendingDebts(overrides?: CallOverrides): Promise<BigNumber[]>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDebts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  popDebtDelay(overrides?: CallOverrides): Promise<BigNumber>;

  popDebtFromQueue(
    queueId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushDebtToQueue(
    tab: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAuthorization(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleUnbackedDebt(
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleUnbackedDebtFromAuction(
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  surplusAuction(overrides?: CallOverrides): Promise<string>;

  surplusAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

  surplusBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebtOnAuction(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedDebt(overrides?: CallOverrides): Promise<BigNumber>;

  updateDebtAuction(
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDebtAuctionLotSize(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIntialDebtAuctionBid(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePopDebtDelay(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSurplusAuction(
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSurplusAuctionLotSize(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSurplusBuffer(
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionDebt(overrides?: CallOverrides): Promise<BigNumber>;

    auctionSurplus(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPendingDebts(overrides?: CallOverrides): Promise<BigNumber>;

    debtAuction(overrides?: CallOverrides): Promise<string>;

    debtAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    debtCount(overrides?: CallOverrides): Promise<BigNumber>;

    debtQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        index: BigNumber;
        debt: BigNumber;
        timestamp: BigNumber;
      }
    >;

    grantAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      ledger_: string,
      surplusAuction_: string,
      debtAuction_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    intialDebtAuctionBid(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<string>;

    listPendingDebts(overrides?: CallOverrides): Promise<BigNumber[]>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDebts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    popDebtDelay(overrides?: CallOverrides): Promise<BigNumber>;

    popDebtFromQueue(
      queueId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pushDebtToQueue(
      tab: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeAuthorization(user: string, overrides?: CallOverrides): Promise<void>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleUnbackedDebtFromAuction(
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    surplusAuction(overrides?: CallOverrides): Promise<string>;

    surplusAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    surplusBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtOnAuction(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    updateDebtAuction(data: string, overrides?: CallOverrides): Promise<void>;

    updateDebtAuctionLotSize(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIntialDebtAuctionBid(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePopDebtDelay(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSurplusAuction(
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSurplusAuctionLotSize(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSurplusBuffer(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionDebt(uint256,uint256,uint256)"(
      auctionId?: BigNumberish | null,
      debtOnAuction?: null,
      initialCollateralBid?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        debtOnAuction: BigNumber;
        initialCollateralBid: BigNumber;
      }
    >;

    AuctionDebt(
      auctionId?: BigNumberish | null,
      debtOnAuction?: null,
      initialCollateralBid?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        auctionId: BigNumber;
        debtOnAuction: BigNumber;
        initialCollateralBid: BigNumber;
      }
    >;

    "AuctionSurplus(uint256,uint256)"(
      auctionId?: BigNumberish | null,
      surplusOnAuction?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionId: BigNumber; surplusOnAuction: BigNumber }
    >;

    AuctionSurplus(
      auctionId?: BigNumberish | null,
      surplusOnAuction?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionId: BigNumber; surplusOnAuction: BigNumber }
    >;

    "GrantAuthorization(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    GrantAuthorization(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    "PopDebtFromQueue(uint256,uint256,uint256)"(
      queueId?: BigNumberish | null,
      debt?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { queueId: BigNumber; debt: BigNumber; timestamp: BigNumber }
    >;

    PopDebtFromQueue(
      queueId?: BigNumberish | null,
      debt?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { queueId: BigNumber; debt: BigNumber; timestamp: BigNumber }
    >;

    "PushDebtToQueue(uint256,uint256,uint256)"(
      queueId?: BigNumberish | null,
      debt?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { queueId: BigNumber; debt: BigNumber; timestamp: BigNumber }
    >;

    PushDebtToQueue(
      queueId?: BigNumberish | null,
      debt?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { queueId: BigNumber; debt: BigNumber; timestamp: BigNumber }
    >;

    "RevokeAuthorization(address)"(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    RevokeAuthorization(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    "SettleUnbackedDebt(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    SettleUnbackedDebt(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "SettleUnbackedDebtFromAuction(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    SettleUnbackedDebtFromAuction(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "UpdateParameter(bytes32,uint256)"(
      parameter?: BytesLike | null,
      data?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { parameter: string; data: BigNumber }
    >;

    "UpdateParameter(bytes32,address)"(
      parameter?: BytesLike | null,
      data?: null
    ): TypedEventFilter<[string, string], { parameter: string; data: string }>;
  };

  estimateGas: {
    auctionDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionSurplus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPendingDebts(overrides?: CallOverrides): Promise<BigNumber>;

    debtAuction(overrides?: CallOverrides): Promise<BigNumber>;

    debtAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    debtCount(overrides?: CallOverrides): Promise<BigNumber>;

    debtQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      ledger_: string,
      surplusAuction_: string,
      debtAuction_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    intialDebtAuctionBid(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(overrides?: CallOverrides): Promise<BigNumber>;

    listPendingDebts(overrides?: CallOverrides): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDebts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    popDebtDelay(overrides?: CallOverrides): Promise<BigNumber>;

    popDebtFromQueue(
      queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushDebtToQueue(
      tab: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleUnbackedDebtFromAuction(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    surplusAuction(overrides?: CallOverrides): Promise<BigNumber>;

    surplusAuctionLotSize(overrides?: CallOverrides): Promise<BigNumber>;

    surplusBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtOnAuction(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    updateDebtAuction(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDebtAuctionLotSize(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIntialDebtAuctionBid(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePopDebtDelay(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSurplusAuction(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSurplusAuctionLotSize(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSurplusBuffer(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionDebt(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionSurplus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countPendingDebts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtAuctionLotSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      ledger_: string,
      surplusAuction_: string,
      debtAuction_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    intialDebtAuctionBid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listPendingDebts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDebts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popDebtDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    popDebtFromQueue(
      queueId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushDebtToQueue(
      tab: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAuthorization(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleUnbackedDebt(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleUnbackedDebtFromAuction(
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    surplusAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    surplusAuctionLotSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surplusBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebtOnAuction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDebtAuction(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDebtAuctionLotSize(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIntialDebtAuctionBid(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePopDebtDelay(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSurplusAuction(
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSurplusAuctionLotSize(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSurplusBuffer(
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
